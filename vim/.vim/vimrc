call plug#begin('~/.vim/plugged')
"Syntax
Plug 'sheerun/vim-polyglot'
"UI
Plug 'bling/vim-airline'
Plug 'ryanoasis/vim-devicons'
Plug 'yggdroot/indentLine'
Plug 'rakr/vim-one'
Plug 'rakr/vim-two-firewatch'
Plug 'ericbn/vim-solarized'
"Tool
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'justinmk/vim-dirvish'
Plug 'vim-scripts/bufexplorer.zip'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'jremmen/vim-ripgrep'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-unimpaired'
Plug 'machakann/vim-sandwich'
Plug 'conradirwin/vim-bracketed-paste'
Plug 'vim-scripts/a.vim'
Plug 'w0rp/ale'
Plug 'airblade/vim-gitgutter'
" Dev
Plug 'lifepillar/vim-mucomplete'
Plug 'Rip-Rip/clang_complete'

call plug#end()

set fileencodings=utf-8,gbk,latin1
set hidden
set tabstop=4 shiftwidth=4 expandtab
set smartcase
set smartindent
if has("gui_running")
    set guioptions-=L
    set guioptions-=T
    set guioptions-=m
    set guioptions-=r
    if has("osx")
        set guifont=Inconsolata\ for\ Powerline\ Nerd\ Font\ Complete\ Mono:h14
    else
        set guifont=InconsolataForPowerline\ NF\ Medium\ 14
    endif
endif
if has('persistent_undo')
    let s:undo_dir=expand('~/.vim/undo')
    if !isdirectory(s:undo_dir)
        call mkdir(s:undo_dir)
    endif
    let &undodir=s:undo_dir
    set undofile
endif
if has('clipboard')
    set clipboard^=unnamedplus,unnamed
endif
set t_Co=256
set termguicolors
if has("gui_running")
    set background=light
    colo one
else
    set background=dark
    colo solarized
endif
set colorcolumn=80
set shortmess+=cI
" plugin settings
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1
let g:indentLine_char = "Â¦"

" ale
" use quickfix instead of loclist
let g:ale_set_quickfix = 1
let g:ale_set_loclist = 0
let g:ale_linters = {'cpp': ['clang']}
let g:ale_cpp_gcc_options='-std=c++17 -Wall'
let g:ale_lint_on_enter = 0 "disable on opening files
let g:ale_lint_on_text_changed = 'never'

" rust settings
autocmd BufRead,BufNewFile Cargo.toml,Cargo.lock,*.rs compiler cargo
autocmd BufRead,BufNewFile Cargo.toml,Cargo.lock,*.rs :map <buffer> <F5> :RustRun<CR>
let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits,traits',
        \'i:impls,trait implementations',
    \]
    \}
let g:rustfmt_autosave = 1
let g:racer_experimental_completer = 1
set completeopt-=preview
set completeopt+=longest,menuone,noinsert,noselect
let g:clang_library_path='/usr/lib/llvm-6.0/lib'
let g:clang_user_options = '-std=c++17'
let g:clang_complete_auto = 1
let g:mucomplete#enable_auto_at_startup = 1

nnoremap <silent> <F1> :NERDTreeToggle<CR>
nnoremap <silent> <F2> :CtrlPTag<CR>
nnoremap <silent> <F3> :CtrlPBuffer<CR>
nnoremap <silent> <F4> :CtrlPMRUFiles<CR>
nnoremap <silent> <F5> :make<CR>
nnoremap <silent> <F6> :e $MYVIMRC<CR>
nnoremap <silent> <F11> :TagbarToggle<CR>
nnoremap <silent> <F12> :NERDTreeToggle<CR>
inoremap <S-Insert> <c-r>*
nnoremap <silent> <C-k> <Plug>(ale_previous_wrap)
nnoremap <silent> <C-j> <Plug>(ale_next_wrap)

command! CN :e ++enc=cp936
command! CU :e ++enc=utf-8
command! Cd :cd %:p:h
