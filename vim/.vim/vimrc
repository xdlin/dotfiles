call plug#begin('~/.vim/plugged')
"Syntax
Plug 'sheerun/vim-polyglot'
Plug 'elzr/vim-json'
Plug 'gavocanov/vim-js-indent'
Plug 'pangloss/vim-javascript'

"UI
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'ericbn/vim-solarized'
Plug 'ryanoasis/vim-devicons'
Plug 'yggdroot/indentLine'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'arcticicestudio/nord-vim'

"Tool
Plug 'jremmen/vim-ripgrep'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-dirvish'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tommcdo/vim-lion'
Plug 'vim-scripts/bufexplorer.zip'
Plug 'lambdalisue/fern.vim'

" Text object
Plug 'michaeljsmith/vim-indent-object'
Plug 'wellle/targets.vim'

"" Tpope
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

" Dev
Plug 'w0rp/ale'
Plug 'vim-scripts/paredit.vim'
Plug 'hrj/vim-drawit'
Plug 'vim-scripts/a.vim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
"Plug 'sillybun/vim-repl'
"Plug 'kassio/neoterm'

" complete
Plug 'natebosch/vim-lsc'
Plug 'ajh17/VimCompletesMe'
call plug#end()

set encoding=utf-8
set fileencodings=utf-8,gbk,latin1
set hidden
set tabstop=4 shiftwidth=4 expandtab
set smartcase
set smartindent
set cindent
set matchpairs+=<:>
set cino+=g0 "no indent after public/private
set cino+=N-s "no indend for namespace
set cino+=E-s "no indent for extern "C" {
set cino+=+0
set cino+=j1,(0,ws,Ws
set completeopt=menu,menuone,noinsert,noselect
if has("gui_running")
    set guioptions-=L
    set guioptions-=T
    set guioptions-=m
    set guioptions-=r
    if has("osx")
        set guifont=Inconsolata\ for\ Powerline\ Nerd\ Font\ Complete\ Mono:h14
    else
        set guifont=DejaVuSansMono\ Nerd\ Font\ Mono\ 14
    endif
endif
if has('persistent_undo')
    let s:undo_dir=expand('~/.vim/undo')
    if !isdirectory(s:undo_dir)
        call mkdir(s:undo_dir)
    endif
    let &undodir=s:undo_dir
    set undofile
endif
if has('clipboard')
    set clipboard^=unnamedplus,unnamed
endif
set t_Co=256
"fix wired '^[[>1;3400;0c' message on start up
set t_RV=
set termguicolors
if has("gui_running")
    set background=light
    colo solarized
else
    set background=dark
    colo solarized
endif
set colorcolumn=80
set shortmess+=cI
set shortmess-=F

" plugin settings
" airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1

" indentLine
let g:indentLine_setConceal = 0

" ale
let g:ale_fix_on_save = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_cpp_cc_executable='gcc'
let g:ale_cpp_cc_options='-fcoroutines -std=c++2a -Wall'
let g:ale_linters = {'cpp': ['gcc']}
let g:ale_fixers = {
\   'vim': ['remove_trailing_lines'],
\   'cpp': ['trim_whitespace', 'remove_trailing_lines']
\}
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

let g:lsc_server_commands = {
            \ 'cpp': 'clangd --log=error',
            \ 'c': 'clangd --log=error',
            \ 'python': 'pylsp',
            \}
let g:lsc_auto_map = {
 \  'GoToDefinition': 'gd',
 \  'FindReferences': 'gr',
 \  'Rename': 'gR',
 \  'ShowHover': 'K',
 \  'FindCodeActions': 'ga',
 \  'Completion': 'omnifunc',
 \}
let g:lsc_enable_autocomplete  = v:true
let g:lsc_enable_diagnostics   = v:false
let g:lsc_reference_highlights = v:false
let g:lsc_trace_level          = 'off'

let g:go_imports_autosave = 0

autocmd FileType lisp,scheme,art setlocal equalprg=scmindent.rkt
autocmd FileType cpp setlocal nolist ts=4 sts=4 sw=4 et
autocmd Filetype gitcommit setlocal tw=80
autocmd FileType json setlocal conceallevel=0 foldmethod=syntax foldlevel=999
"fzf
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

nnoremap <silent> <C-P> :FZF<CR>
nnoremap <silent> <F1>  :NERDTreeToggle<CR>
nnoremap <silent> <F2>  :BTags<CR>
nnoremap <silent> <F3>  :Buffers<CR>
nnoremap <silent> <F4>  :History<CR>
nnoremap <silent> <F5>  :make<CR>
nnoremap <silent> <F6>  :e $MYVIMRC<CR>
nnoremap <silent> <F11> :TagbarToggle<CR>
nnoremap <silent> <F12> :NERDTreeToggle<CR>
inoremap <S-Insert> <c-r>*
nnoremap <silent> <C-k> <Plug>(ale_previous_wrap)
nnoremap <silent> <C-j> <Plug>(ale_next_wrap)
command! Cd :cd %:p:h
